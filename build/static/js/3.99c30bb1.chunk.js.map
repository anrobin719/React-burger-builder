{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.css"],"names":["module","exports","CheckoutSummary","ContactData","checkoutSummary","props","react_default","a","createElement","className","classes","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","_this","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","Object","defineProperty","setState","_this2","this","formElementsArray","key","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","react_router","to","purchasedRedirect","purchased","CheckoutSummary_CheckoutSummary","path","match","component","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","inputElement","inputClasses","InputElement","Invalid","assign","join","onChange","option","Label","label"],"mappings":"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","file":"static/js/3.99c30bb1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary__CheckoutSummary__1xBm4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData__ContactData__1J81r\"};","import React from 'react';\n\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.css';\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!</h1>\n            <div style={{width: '100%', margin: 'auto'}}>\n                <Burger ingredients={props.ingredients}/>\n            </div>\n            <Button \n                btnType=\"Danger\"\n                clicked={props.checkoutCancelled}>CANCEL</Button>\n            <Button \n                btnType=\"Success\"\n                clicked={props.checkoutContinued}>CONTINUE</Button>\n        </div>\n    );\n}\n\nexport default checkoutSummary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport classes from './ContactData.css';\nimport axios from '../../../axios-orders';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\nimport * as actions from '../../../store/actions/index';\nimport { updateObject, checkValidity } from '../../../shared/utility';\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5,\n                    isNumeric: true\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}\n                    ]\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true\n            }\n        },\n        formIsValid: false\n    }\n\n    orderHandler = ( event ) => {\n        event.preventDefault();\n  \n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price,\n            orderData: formData,\n            userId: this.props.userId\n        }\n\n        this.props.onOrderBurger(order, this.props.token);\n        \n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        \n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n            value: event.target.value,\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n            touched: true\n        });\n        const updatedOrderForm = updateObject(this.state.orderForm, {\n            [inputIdentifier]: updatedFormElement\n        });\n        \n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n    }\n\n    render () {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n                ))}\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\n            </form>\n        );\n        if ( this.props.loading ) {\n            form = <Spinner />;\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\n\nclass Checkout extends Component {\n\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    }\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace( '/checkout/contact-data' );\n    }\n\n    render () {\n        let summary = <Redirect to=\"/\" />\n        if ( this.props.ings ) {\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\"/> : null;\n            summary = (\n                <div>\n                    {purchasedRedirect}\n                    <CheckoutSummary\n                        ingredients={this.props.ings}\n                        checkoutCancelled={this.checkoutCancelledHandler}\n                        checkoutContinued={this.checkoutContinuedHandler} />\n                    <Route\n                        path={this.props.match.path + '/contact-data'}\n                        component={ContactData} />\n                </div>\n            );\n        }\n        return summary;\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    }\n};\n\nexport default connect( mapStateToProps )( Checkout );","import React from 'react';\n\nimport classes from './Input.css';\n\nconst input = (props) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if(props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch(props.elementType) {\n        case('input'):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case('textarea'):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case('select'):\n            inputElement = (\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n            className={inputClasses.join(' ')}\n            {...props.elementConfig}\n            value={props.value}\n            onChange={props.changed} />;\n    }   \n\n    return(\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n}\n\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__s67N0\",\"Label\":\"Input__Label___n-1m\",\"InputElement\":\"Input__InputElement__2-aFx\",\"Invalid\":\"Input__Invalid__1sl1p\"};"],"sourceRoot":""}