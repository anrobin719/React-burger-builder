{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/burger-builder/src/components/Burger/Burger.js\";\nimport React from 'react';\nimport classes from './Burger.css';\nimport BurgerIngredient from './BurgerIngredient/BurgerIngredient';\n\nconst burger = props => {\n  // let transformedIngredients = Object.keys(props.ingredients)\n  //     .map(igKey => {\n  //         return [...Array(props.ingredients[igKey])].map((_, i) => {\n  //             return <BurgerIngredient key={igKey + i} type={igKey} />;\n  //         });\n  //     })\n  //     .reduce((arr, el) => {\n  //         return arr.concat(el)\n  //     }, []);\n  let transformedIngredients = Object.keys(props.ingredients).map(item => {\n    return [...Array(props.ingredients[item])].map((_, i) => {\n      return React.createElement(BurgerIngredient, {\n        key: item + i,\n        type: item,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      });\n    });\n  }).reduce(item => item, []);\n  console.log(transformedIngredients);\n\n  if (transformedIngredients.length === 0) {\n    transformedIngredients = React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"Please start adding ingredients!\");\n  }\n\n  return React.createElement(\"div\", {\n    className: classes.Burger,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(BurgerIngredient, {\n    type: \"bread-top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), transformedIngredients, React.createElement(BurgerIngredient, {\n    type: \"bread-bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }));\n};\n\nexport default burger;","map":{"version":3,"sources":["/Users/macbook/Desktop/burger-builder/src/components/Burger/Burger.js"],"names":["React","classes","BurgerIngredient","burger","props","transformedIngredients","Object","keys","ingredients","map","item","Array","_","i","reduce","console","log","length","Burger"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,gBAAP,MAA6B,qCAA7B;;AAEA,MAAMC,MAAM,GAAKC,KAAF,IAAa;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAIC,sBAAsB,GAAGC,MAAM,CAACC,IAAP,CAAYH,KAAK,CAACI,WAAlB,EAA+BC,GAA/B,CAAmCC,IAAI,IAAI;AACpE,WAAO,CAAC,GAAGC,KAAK,CAACP,KAAK,CAACI,WAAN,CAAkBE,IAAlB,CAAD,CAAT,EAAoCD,GAApC,CAAwC,CAACG,CAAD,EAAIC,CAAJ,KAAU;AACrD,aAAO,oBAAC,gBAAD;AAAkB,QAAA,GAAG,EAAEH,IAAI,GAAGG,CAA9B;AAAiC,QAAA,IAAI,EAAEH,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAFM,CAAP;AAGH,GAJ4B,EAI1BI,MAJ0B,CAIlBJ,IAAD,IAAUA,IAJS,EAIJ,EAJI,CAA7B;AAMAK,EAAAA,OAAO,CAACC,GAAR,CAAYX,sBAAZ;;AAEA,MAAIA,sBAAsB,CAACY,MAAvB,KAAkC,CAAtC,EAAyC;AACrCZ,IAAAA,sBAAsB,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAzB;AACH;;AAED,SACI;AAAK,IAAA,SAAS,EAAEJ,OAAO,CAACiB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAESb,sBAFT,EAGI,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAC,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ;AAOH,CA9BD;;AAgCA,eAAeF,MAAf","sourcesContent":["import React from 'react';\n\nimport classes from './Burger.css';\nimport BurgerIngredient from './BurgerIngredient/BurgerIngredient';\n\nconst burger = ( props ) => {\n    // let transformedIngredients = Object.keys(props.ingredients)\n    //     .map(igKey => {\n    //         return [...Array(props.ingredients[igKey])].map((_, i) => {\n    //             return <BurgerIngredient key={igKey + i} type={igKey} />;\n    //         });\n    //     })\n    //     .reduce((arr, el) => {\n    //         return arr.concat(el)\n    //     }, []);\n    \n    let transformedIngredients = Object.keys(props.ingredients).map(item => {\n        return [...Array(props.ingredients[item])].map((_, i) => {\n            return <BurgerIngredient key={item + i} type={item} />;\n        });\n    }).reduce((item) => item,[]);\n\n    console.log(transformedIngredients);\n    \n    if (transformedIngredients.length === 0) {\n        transformedIngredients = <p>Please start adding ingredients!</p>\n    }\n\n    return(\n        <div className={classes.Burger}>\n            <BurgerIngredient type=\"bread-top\" />\n                {transformedIngredients}\n            <BurgerIngredient type=\"bread-bottom\" />\n        </div>\n    );\n};\n\nexport default burger;"]},"metadata":{},"sourceType":"module"}