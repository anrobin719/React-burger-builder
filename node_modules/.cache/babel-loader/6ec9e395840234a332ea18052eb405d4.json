{"ast":null,"code":"import _objectSpread from \"/Users/macbook/Desktop/React-burger-builder/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as actionTypes from '../actions/actionTypes';\nimport axios from '../../axios-orders';\nexport const purchaseBurgerSuccess = (id, orderData) => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_SUCCESS,\n    orderId: id,\n    orderData: orderData\n  };\n};\nexport const purchaseBurgerFail = error => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_FAIL,\n    error: error\n  };\n};\nexport const purchaseBurgerStart = () => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_START\n  };\n};\nexport const purchaseBurger = orderData => {\n  return dispatch => {\n    dispatch(purchaseBurgerStart());\n    axios.post('/orders.json', orderData).then(response => {\n      dispatch(purchaseBurgerSuccess(response.data.name, orderData));\n    }).catch(error => {\n      dispatch(purchaseBurgerFail(error));\n    });\n  };\n};\nexport const purchaseInit = () => {\n  return {\n    type: actionTypes.PURCHASE_INIT\n  };\n};\nexport const fetchOrdersSuccess = orders => {\n  return {\n    type: actionTypes.FETCH_ORDERS_SUCCESS,\n    orders: orders\n  };\n};\nexport const fetchOrdersFail = error => {\n  return {\n    type: actionTypes.FETCH_ORDERS_FAIL,\n    error: error\n  };\n};\nexport const fetchOrdersStart = () => {\n  return {\n    type: actionTypes.FETCH_ORDERS_START\n  };\n};\nexport const fetchOrders = () => {\n  return dispatch => {\n    dispatch(fetchOrdersStart());\n    axios.get('/orders.json').then(res => {\n      console.log(res.data);\n      const fetchedOrders = [];\n\n      for (let key in res.data) {\n        fetchedOrders.push(_objectSpread({}, res.data[key], {\n          id: key\n        }));\n      }\n\n      dispatch(fetchOrdersSuccess(fetchedOrders));\n    }).catch(err => {\n      dispatch(fetchOrdersFail(err));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/macbook/Desktop/React-burger-builder/src/store/actions/order.js"],"names":["actionTypes","axios","purchaseBurgerSuccess","id","orderData","type","PURCHASE_BURGER_SUCCESS","orderId","purchaseBurgerFail","error","PURCHASE_BURGER_FAIL","purchaseBurgerStart","PURCHASE_BURGER_START","purchaseBurger","dispatch","post","then","response","data","name","catch","purchaseInit","PURCHASE_INIT","fetchOrdersSuccess","orders","FETCH_ORDERS_SUCCESS","fetchOrdersFail","FETCH_ORDERS_FAIL","fetchOrdersStart","FETCH_ORDERS_START","fetchOrders","get","res","console","log","fetchedOrders","key","push","err"],"mappings":";AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAO,MAAMC,qBAAqB,GAAG,CAACC,EAAD,EAAKC,SAAL,KAAmB;AACpD,SAAO;AACHC,IAAAA,IAAI,EAAEL,WAAW,CAACM,uBADf;AAEHC,IAAAA,OAAO,EAAEJ,EAFN;AAGHC,IAAAA,SAAS,EAAEA;AAHR,GAAP;AAKH,CANM;AAQP,OAAO,MAAMI,kBAAkB,GAAIC,KAAD,IAAW;AACzC,SAAO;AACHJ,IAAAA,IAAI,EAAEL,WAAW,CAACU,oBADf;AAEHD,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,mBAAmB,GAAG,MAAM;AACrC,SAAO;AACHN,IAAAA,IAAI,EAAEL,WAAW,CAACY;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,cAAc,GAAIT,SAAD,IAAe;AACzC,SAAOU,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACH,mBAAmB,EAApB,CAAR;AACAV,IAAAA,KAAK,CAACc,IAAN,CAAY,cAAZ,EAA4BX,SAA5B,EACKY,IADL,CACWC,QAAQ,IAAI;AACfH,MAAAA,QAAQ,CAACZ,qBAAqB,CAACe,QAAQ,CAACC,IAAT,CAAcC,IAAf,EAAqBf,SAArB,CAAtB,CAAR;AACH,KAHL,EAIKgB,KAJL,CAIYX,KAAK,IAAI;AACbK,MAAAA,QAAQ,CAACN,kBAAkB,CAACC,KAAD,CAAnB,CAAR;AACH,KANL;AAOH,GATD;AAUH,CAXM;AAaP,OAAO,MAAMY,YAAY,GAAG,MAAM;AAC9B,SAAO;AACHhB,IAAAA,IAAI,EAAEL,WAAW,CAACsB;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,kBAAkB,GAAIC,MAAD,IAAY;AAC1C,SAAO;AACHnB,IAAAA,IAAI,EAAEL,WAAW,CAACyB,oBADf;AAEHD,IAAAA,MAAM,EAAEA;AAFL,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,eAAe,GAAIjB,KAAD,IAAW;AACtC,SAAO;AACHJ,IAAAA,IAAI,EAAEL,WAAW,CAAC2B,iBADf;AAEHlB,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAMmB,gBAAgB,GAAG,MAAM;AAClC,SAAO;AACHvB,IAAAA,IAAI,EAAEL,WAAW,CAAC6B;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC7B,SAAOhB,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACc,gBAAgB,EAAjB,CAAR;AACA3B,IAAAA,KAAK,CAAC8B,GAAN,CAAU,cAAV,EACKf,IADL,CACUgB,GAAG,IAAI;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACd,IAAhB;AACA,YAAMiB,aAAa,GAAG,EAAtB;;AACA,WAAK,IAAIC,GAAT,IAAgBJ,GAAG,CAACd,IAApB,EAA0B;AACtBiB,QAAAA,aAAa,CAACE,IAAd,mBACOL,GAAG,CAACd,IAAJ,CAASkB,GAAT,CADP;AAEIjC,UAAAA,EAAE,EAAEiC;AAFR;AAIH;;AACDtB,MAAAA,QAAQ,CAACS,kBAAkB,CAACY,aAAD,CAAnB,CAAR;AACH,KAXL,EAYKf,KAZL,CAYWkB,GAAG,IAAI;AACVxB,MAAAA,QAAQ,CAACY,eAAe,CAACY,GAAD,CAAhB,CAAR;AACH,KAdL;AAeH,GAjBD;AAkBH,CAnBM","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport axios from '../../axios-orders';\n\nexport const purchaseBurgerSuccess = (id, orderData) => {\n    return {\n        type: actionTypes.PURCHASE_BURGER_SUCCESS,\n        orderId: id,\n        orderData: orderData\n    }\n};\n\nexport const purchaseBurgerFail = (error) => {\n    return {\n        type: actionTypes.PURCHASE_BURGER_FAIL,\n        error: error\n    };\n};\n\nexport const purchaseBurgerStart = () => {\n    return {\n        type: actionTypes.PURCHASE_BURGER_START\n    }\n}\n\nexport const purchaseBurger = (orderData) => {\n    return dispatch => {\n        dispatch(purchaseBurgerStart());\n        axios.post( '/orders.json', orderData )\n            .then( response => {\n                dispatch(purchaseBurgerSuccess(response.data.name, orderData))\n            } )\n            .catch( error => {\n                dispatch(purchaseBurgerFail(error));\n            } );\n    };\n};\n\nexport const purchaseInit = () => {\n    return {\n        type: actionTypes.PURCHASE_INIT\n    };\n};\n\nexport const fetchOrdersSuccess = (orders) => {\n    return {\n        type: actionTypes.FETCH_ORDERS_SUCCESS,\n        orders: orders\n    };\n};\n\nexport const fetchOrdersFail = (error) => {\n    return {\n        type: actionTypes.FETCH_ORDERS_FAIL,\n        error: error\n    };\n};\n\nexport const fetchOrdersStart = () => {\n    return {\n        type: actionTypes.FETCH_ORDERS_START\n    };\n};\n\nexport const fetchOrders = () => {\n    return dispatch => {\n        dispatch(fetchOrdersStart());\n        axios.get('/orders.json')\n            .then(res => {\n                console.log(res.data);\n                const fetchedOrders = [];\n                for (let key in res.data) {\n                    fetchedOrders.push({\n                        ...res.data[key],\n                        id: key\n                    });\n                }\n                dispatch(fetchOrdersSuccess(fetchedOrders));\n            })\n            .catch(err => {\n                dispatch(fetchOrdersFail(err));\n            });\n    };\n};"]},"metadata":{},"sourceType":"module"}